{"version":3,"sources":["utils/fetchClient.ts","components/PostsList.tsx","api/posts.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostsList","selectedUser","openUserPost","setOpenUserPost","setSelectedUserPost","selectedUserPostId","setSelectedUserPostId","setIsLoadingComments","useState","selectedUserPosts","setSelectedUserPosts","loadUserPostsFromServer","useCallback","a","postsFromServer","filteredPosts","filter","post","userId","console","error","useEffect","className","map","id","title","type","onClick","Loader","NewCommentForm","setAddComment","inputAuthorName","setInputAuthorName","isEmptyInputAuthorName","setIsEmptyInputAuthorName","inputAuthorEmail","setInputAuthorEmail","isEmptyInputAuthorEmail","setIsEmptyInputAuthorEmail","inputCommentText","setInputCommentText","isEmptyInputCommentText","setIsEmptyInputCommentText","onSubmit","event","preventDefault","htmlFor","name","placeholder","value","classNames","onChange","target","handleChangeAutorName","handleChangeAutorEmail","handleChangeCommentText","isAllDataFilled","postId","email","PostDetails","selectedUserPost","isLoadingComments","userComments","setUserComments","writeComment","setWriteComment","addComment","loadUserCommentsFromServer","commentsFromServer","filteredComments","comment","log","length","href","UserSelector","usersArray","setSelectedUser","setIsLoadingUserPosts","dropDown","setDropDown","selectedUserName","role","user","App","setUsersArray","isLoadingUserPosts","loadUsersFromServer","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4dbdc20.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","// import classNames from 'classnames';\nimport React, {\n  useCallback, useEffect, useState,\n} from 'react';\nimport { getPosts } from '../api/posts';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  selectedUser: string,\n  openUserPost: boolean,\n  setOpenUserPost: (\n    isOpen: boolean) => void,\n  // selectedUserPosts: Post[],\n  setSelectedUserPost: (userPost: Post) => void,\n  selectedUserPostId: number,\n  setSelectedUserPostId: (postId: number) => void,\n  setIsLoadingComments: (load: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUser,\n  openUserPost,\n  setOpenUserPost,\n  // selectedUserPosts,\n  setSelectedUserPost,\n  selectedUserPostId,\n  setSelectedUserPostId,\n  setIsLoadingComments,\n}) => {\n  const [selectedUserPosts, setSelectedUserPosts] = useState<Post[] | []>([]);\n  // const [selectedUserPostId, setSelectedUserPostId] = useState(0);\n\n  const loadUserPostsFromServer = useCallback(\n    async () => {\n      try {\n        const postsFromServer = await getPosts();\n        const filteredPosts = postsFromServer.filter(\n          post => post.userId === +selectedUser,\n        );\n\n        setSelectedUserPosts(filteredPosts);\n      } catch (error) {\n        // eslint-disable-next-line\n        console.error(error);\n      }\n    }, [selectedUser],\n  );\n\n  useEffect(() => {\n    loadUserPostsFromServer();\n  }, [selectedUser]);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {selectedUserPosts.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={`button is-link ${openUserPost && selectedUserPostId === post.id ? '' : 'is-light'} `}\n                  onClick={() => {\n                    if (openUserPost && selectedUserPostId !== post.id) {\n                      setOpenUserPost(true);\n                      setSelectedUserPostId(post.id);\n                      setSelectedUserPost(post);\n                      setIsLoadingComments(true);\n                    } else {\n                      setOpenUserPost(!openUserPost);\n                      setSelectedUserPostId(post.id);\n                      setSelectedUserPost(post);\n                      setIsLoadingComments(true);\n                    }\n                  }}\n                >\n                  {(openUserPost && selectedUserPostId === post.id)\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = () => {\n  return client.get<Post[]>('/posts');\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { createComments } from '../api/comments';\n\ntype Props = {\n  selectedUserPostId: number,\n  setAddComment: (load: boolean) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedUserPostId,\n  setAddComment,\n}) => {\n  const [inputAuthorName, setInputAuthorName] = useState('');\n  const [isEmptyInputAuthorName, setIsEmptyInputAuthorName] = useState(false);\n  const [inputAuthorEmail, setInputAuthorEmail] = useState('');\n  const [isEmptyInputAuthorEmail, setIsEmptyInputAuthorEmail] = useState(false);\n  const [inputCommentText, setInputCommentText] = useState('');\n  const [isEmptyInputCommentText, setIsEmptyInputCommentText] = useState(false);\n\n  const handleChangeAutorName = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setInputAuthorName(event.target.value);\n    if (event.target.value) {\n      setIsEmptyInputAuthorName(false);\n    }\n  };\n\n  const handleChangeAutorEmail = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setInputAuthorEmail(event.target.value);\n    if (event.target.value) {\n      setIsEmptyInputAuthorEmail(false);\n    }\n  };\n\n  const handleChangeCommentText = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setInputCommentText(event.target.value);\n    if (event.target.value) {\n      setIsEmptyInputCommentText(false);\n    }\n  };\n\n  const handleAddComment = () => {\n    const isAllDataFilled = selectedUserPostId && inputAuthorName\n      && inputAuthorEmail && inputCommentText;\n\n    if (!inputAuthorName) {\n      setIsEmptyInputAuthorName(true);\n    }\n\n    if (!inputAuthorEmail) {\n      setIsEmptyInputAuthorEmail(true);\n    }\n\n    if (!inputCommentText) {\n      setIsEmptyInputCommentText(true);\n    }\n\n    if (isAllDataFilled) {\n      createComments(\n        selectedUserPostId, inputAuthorName, inputAuthorEmail, inputCommentText,\n      );\n\n      setInputCommentText('');\n      setAddComment(true);\n    }\n  };\n\n  const handleClearCommentData = () => {\n    setInputAuthorName('');\n    setInputAuthorEmail('');\n    setInputCommentText('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            value={inputAuthorName}\n            className={classNames('input', {\n              'is-danger': isEmptyInputAuthorName,\n            })}\n            onChange={(event) => handleChangeAutorName(event)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isEmptyInputAuthorName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmptyInputAuthorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={inputAuthorEmail}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isEmptyInputAuthorEmail,\n            })}\n            onChange={(event) => handleChangeAutorEmail(event)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmptyInputAuthorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmptyInputAuthorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={inputCommentText}\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isEmptyInputCommentText,\n            })}\n            onChange={(event) => handleChangeCommentText(event)}\n          />\n        </div>\n\n        {isEmptyInputCommentText && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className=\"button is-link\"\n            onClick={handleAddComment}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearCommentData}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = () => {\n  return client.get<Comment[]>('/comments');\n};\n\nexport const createComments = (\n  postId: number, name: string, email: string, body: string,\n) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n","import React, { useState, useCallback, useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\n\nimport { getComments } from '../api/comments';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  selectedUserPost: Post,\n  selectedUserPostId: number,\n  isLoadingComments: boolean,\n  setIsLoadingComments: (load: boolean) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedUserPost,\n  selectedUserPostId,\n  isLoadingComments,\n  setIsLoadingComments,\n}) => {\n  const [userComments, setUserComments] = useState<Comment[] | []>([]);\n  const [writeComment, setWriteComment] = useState(false);\n  const [addComment, setAddComment] = useState(false);\n\n  const loadUserCommentsFromServer = useCallback(\n    async () => {\n      try {\n        const commentsFromServer = await getComments();\n        const filteredComments = commentsFromServer.filter(\n          comment => comment.postId === selectedUserPostId,\n        );\n\n        setUserComments(filteredComments);\n      } catch (error) {\n        // eslint-disable-next-line\n        console.log(error);\n      } finally {\n        setIsLoadingComments(false);\n      }\n    }, [selectedUserPostId],\n  );\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoadingComments(false);\n    }, 500);\n  }, [userComments]);\n\n  useEffect(() => {\n    loadUserCommentsFromServer();\n    setAddComment(false);\n  }, [selectedUserPostId, addComment]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedUserPost.id}: ${selectedUserPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedUserPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments\n            ? <Loader />\n            : (\n              <>\n                {/* <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div> */}\n                {userComments.length === 0\n                  ? (\n                    <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                      No comments yet\n                    </p>\n                  ) : (\n                    <>\n                      <p className=\"title is-4\">Comments:</p>\n\n                      {userComments.map(comment => (\n                        <article\n                          className=\"message is-small\"\n                          data-cy=\"Comment\"\n                          key={comment.id}\n                        >\n                          <div className=\"message-header\">\n                            <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                              {comment.name}\n                            </a>\n                            <button\n                              data-cy=\"CommentDelete\"\n                              type=\"button\"\n                              className=\"delete is-small\"\n                              aria-label=\"delete\"\n                            >\n                              delete button\n                            </button>\n                          </div>\n\n                          <div className=\"message-body\" data-cy=\"CommentBody\">\n                            {comment.body}\n                          </div>\n                        </article>\n                      ))}\n                    </>\n                  )}\n              </>\n            )}\n\n          {!writeComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setWriteComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {writeComment && (\n          <NewCommentForm\n            selectedUserPostId={selectedUserPostId}\n            setAddComment={setAddComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { User } from '../types/User';\n\ntype Props = {\n  usersArray: User[] | [],\n  selectedUser: string,\n  setSelectedUser: (userId: string) => void,\n  setIsLoadingUserPosts: (load: boolean) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  usersArray,\n  selectedUser,\n  setSelectedUser,\n  setIsLoadingUserPosts,\n}) => {\n  const [dropDown, setDropDown] = useState(false);\n\n  const selectedUserName = selectedUser\n    ? usersArray[+selectedUser - 1].name\n    : 'Choose a user';\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': dropDown,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropDown(!dropDown)}\n        >\n          <span>{selectedUserName}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {usersArray.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': +selectedUser === user.id,\n              })}\n              onClick={() => {\n                setIsLoadingUserPosts(true);\n                setSelectedUser(`${user.id}`);\n                setDropDown(false);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useEffect, useCallback, useState,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nimport { getUsers } from './api/users';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [usersArray, setUsersArray] = useState<User[] | []>([]);\n  const [selectedUser, setSelectedUser] = useState('');\n  const [isLoadingUserPosts, setIsLoadingUserPosts] = useState(false);\n  const [openUserPost, setOpenUserPost] = useState(false);\n  const [selectedUserPost, setSelectedUserPost] = useState<Post>();\n  const [selectedUserPostId, setSelectedUserPostId] = useState(0);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n\n  const loadUsersFromServer = useCallback(\n    async () => {\n      try {\n        const todosFromServer = await getUsers();\n\n        setUsersArray(todosFromServer);\n      } catch (error) {\n        // eslint-disable-next-line\n        console.log(error);\n      } finally {\n        setIsLoadingUserPosts(false);\n      }\n    }, [],\n  );\n\n  useEffect(() => {\n    loadUsersFromServer();\n  }, []);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoadingUserPosts(false);\n    }, 500);\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  usersArray={usersArray}\n                  selectedUser={selectedUser}\n                  setIsLoadingUserPosts={setIsLoadingUserPosts}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingUserPosts && <Loader />}\n\n                {/* {selectedUser && !isLoadingUserPosts && (\n                  <>\n                    <div\n                      className=\"notification is-danger\"\n                      data-cy=\"PostsLoadingError\"\n                    >\n                      Something went wrong!\n                    </div>\n\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  </>\n                )} */}\n\n                {selectedUser && !isLoadingUserPosts && (\n                  <PostsList\n                    selectedUser={selectedUser}\n                    openUserPost={openUserPost}\n                    setOpenUserPost={setOpenUserPost}\n                    // selectedUserPosts={selectedUserPosts}\n                    setSelectedUserPost={setSelectedUserPost}\n                    selectedUserPostId={selectedUserPostId}\n                    setSelectedUserPostId={setSelectedUserPostId}\n                    setIsLoadingComments={setIsLoadingComments}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          {selectedUser && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                { 'Sidebar--open': openUserPost },\n              )}\n            >\n              {openUserPost && selectedUserPost && (\n                <div className=\"tile is-child box is-success \">\n\n                  <PostDetails\n                    selectedUserPost={selectedUserPost}\n                    selectedUserPostId={selectedUserPostId}\n                    isLoadingComments={isLoadingComments}\n                    setIsLoadingComments={setIsLoadingComments}\n                  />\n\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}