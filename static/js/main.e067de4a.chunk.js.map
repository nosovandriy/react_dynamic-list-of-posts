{"version":3,"sources":["utils/fetchClient.ts","components/PostsList.tsx","api/posts.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostsList","selectedUserId","openUserPost","setOpenUserPost","selectedUserPosts","setSelectedUserPost","selectedUserPostId","setSelectedUserPostId","setIsLoadingComments","setWriteComment","setSelectedUserPosts","isLoadingUserPosts","setIsLoadingUserPosts","failedToFetch","setFailedToFetch","loadUserPostsFromServer","useCallback","a","postsFromServer","useEffect","length","className","map","post","id","title","type","onClick","handleLoaderComments","Loader","NewCommentForm","setIsLoadingComment","isLoadingComment","loadUserCommentsFromServer","setFailedToFetchComments","useState","inputAuthorName","setInputAuthorName","isEmptyInputAuthorName","setIsEmptyInputAuthorName","inputAuthorEmail","setInputAuthorEmail","isEmptyInputAuthorEmail","setIsEmptyInputAuthorEmail","inputCommentText","setInputCommentText","isEmptyInputCommentText","setIsEmptyInputCommentText","loadCommentOnServer","userPostId","authorName","authorEmail","commentText","postId","name","email","onSubmit","event","preventDefault","htmlFor","placeholder","value","classNames","onChange","target","handleChangeAutorName","handleChangeAutorEmail","handleChangeCommentText","isAllDataFilled","PostDetails","selectedUserPost","isLoadingComments","writeComment","userComments","setUserComments","failedToFetchComments","commentsFromServer","deleteCommentOnServer","commentId","comment","href","UserSelector","usersArray","setSelectedUser","dropDown","setDropDown","selectedUserName","find","user","onBlur","nativeEvent","relatedTarget","role","userId","App","setUsersArray","loadUsersFromServer","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"+RAAMA,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAIa,IAHbC,EAGY,uDAHY,MAExBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIZ,GAAJ,OAAoBD,EAAWC,IADzBY,EAGL,SAAIZ,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAHlDU,EAMH,SAACZ,GAAD,OAAiBD,EAAQC,EAAK,W,OClB3Ba,EAA6B,SAAC,GAepC,IAdLC,EAcI,EAdJA,eACAC,EAaI,EAbJA,aACAC,EAYI,EAZJA,gBACAC,EAWI,EAXJA,kBACAC,EAUI,EAVJA,oBACAC,EASI,EATJA,mBACAC,EAQI,EARJA,sBACAC,EAOI,EAPJA,qBACAC,EAMI,EANJA,gBACAC,EAKI,EALJA,qBACAC,EAII,EAJJA,mBACAC,EAGI,EAHJA,sBACAC,EAEI,EAFJA,cACAC,EACI,EADJA,iBAEMC,EAA0BC,sBAAW,sBACzC,4BAAAC,EAAA,sEAEIH,GAAiB,GAFrB,SCnCKf,EAAA,wBDsCsCE,IAH3C,OAGUiB,EAHV,OAKIR,EAAqBQ,GALzB,gDAOIJ,GAAiB,GAPrB,yBASIF,GAAsB,GAT1B,4EAWG,CAACX,IAGNkB,qBAAU,WACRJ,MACC,CAACd,IAeJ,OACE,mCAEIG,EAAkBgB,OAAS,IACvBT,IAAuBE,GACzB,sBAAK,UAAQ,YAAb,UACE,mBAAGQ,UAAU,QAAb,oBACA,wBACEA,UAAU,uDADZ,UAGE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGjB,EAAkBkB,KAAI,SAAAC,GAAI,OACzB,qBACE,UAAQ,OADV,UAIE,oBAAI,UAAQ,SAAZ,SAAsBA,EAAKC,KAE3B,oBAAI,UAAQ,YAAZ,SACGD,EAAKE,QAGR,oBAAIJ,UAAU,8BAAd,SACE,wBACEK,KAAK,SACL,UAAQ,aACRL,UAAS,yBAAoBnB,GAAgBI,IAAuBiB,EAAKC,GAAK,GAAK,WAA1E,KACTG,QAAS,kBAhDF,SAACJ,GACxBrB,GAAgBI,IAAuBiB,EAAKC,GAC9CrB,GAAgB,GAEhBA,GAAiBD,GAGnBO,GAAgB,GAChBF,EAAsBgB,EAAKC,IAC3BnB,EAAoBkB,GACpBf,GAAqB,GAsCcoB,CAAqBL,IAJtC,SAMIrB,GAAgBI,IAAuBiB,EAAKC,GAC1C,QACA,aAjBHD,EAAKC,kBE1FjBK,G,MAAS,kBACpB,qBAAKR,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCSNS,EAAkC,SAAC,GAMzC,IALLxB,EAKI,EALJA,mBACAyB,EAII,EAJJA,oBACAC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,2BACAC,EACI,EADJA,yBAEA,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA4DF,oBAAS,GAArE,mBAAOG,EAAP,KAA+BC,EAA/B,KACA,EAAgDJ,mBAAS,IAAzD,mBAAOK,EAAP,KAAyBC,EAAzB,KACA,EAA8DN,oBAAS,GAAvE,mBAAOO,EAAP,KAAgCC,EAAhC,KACA,EAAgDR,mBAAS,IAAzD,mBAAOS,EAAP,KAAyBC,EAAzB,KACA,EAA8DV,oBAAS,GAAvE,mBAAOW,EAAP,KAAgCC,EAAhC,KAEMC,EAAsBhC,sBAAW,uCACrC,WAAOiC,EAAYC,EAAYC,EAAaC,GAA5C,SAAAnC,EAAA,sEAEIiB,GAAyB,GAF7B,SClBKnC,EAAqB,YAAa,CACvCsD,ODqBMJ,ECpBNK,KDqBMJ,ECpBNK,MDqBMJ,ECpBN5D,KDqBM6D,IAPN,sDAUIlB,GAAyB,GAV7B,uBAYID,IAZJ,0EADqC,4DAelC,IAiEL,OACE,uBACE,UAAQ,iBACRuB,SAAU,SAACC,GAAD,OAAWA,EAAMC,kBAF7B,UAIE,sBAAKrC,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQsC,QAAQ,sBAAjC,yBAIA,sBAAKtC,UAAU,yCAAf,UACE,uBACEK,KAAK,OACL4B,KAAK,OACL9B,GAAG,sBACHoC,YAAY,eACZC,MAAOzB,EACPf,UAAWyC,IAAW,QAAS,CAC7B,YAAaxB,IAEfyB,SAAU,SAACN,GAAD,OAlFU,SAC5BA,GAEApB,EAAmBoB,EAAMO,OAAOH,OAC5BJ,EAAMO,OAAOH,OACftB,GAA0B,GA6EC0B,CAAsBR,MAG7C,sBAAMpC,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGdiB,GACC,sBACEjB,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBiB,GACC,mBAAGjB,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQsC,QAAQ,uBAAjC,0BAIA,sBAAKtC,UAAU,yCAAf,UACE,uBACEK,KAAK,OACL4B,KAAK,QACLO,MAAOrB,EACPhB,GAAG,uBACHoC,YAAY,iBACZvC,UAAWyC,IAAW,QAAS,CAC7B,YAAapB,IAEfqB,SAAU,SAACN,GAAD,OAhHW,SAC7BA,GAEAhB,EAAoBgB,EAAMO,OAAOH,OAC7BJ,EAAMO,OAAOH,OACflB,GAA2B,GA2GAuB,CAAuBT,MAG9C,sBAAMpC,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGdqB,GACC,sBACErB,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBqB,GACC,mBAAGrB,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQsC,QAAQ,eAAjC,0BAIA,qBAAKtC,UAAU,UAAf,SACE,0BACEG,GAAG,eACH8B,KAAK,OACLO,MAAOjB,EACPgB,YAAY,oBACZvC,UAAWyC,IAAW,WAAY,CAChC,YAAahB,IAEfiB,SAAU,SAACN,GAAD,OA7IY,SAC9BA,GAEAZ,EAAoBY,EAAMO,OAAOH,OAC7BJ,EAAMO,OAAOH,OACfd,GAA2B,GAwIAoB,CAAwBV,QAIhDX,GACC,mBAAGzB,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEK,KAAK,SACLL,UAAWyC,IACT,iBACA,CAAE,aAAc9B,IAElBL,QAvJe,WACvB,IAAMyC,EAAkB9D,GAAsB8B,GACzCI,GAAoBI,EAEpBR,GACHG,GAA0B,GAGvBC,GACHG,GAA2B,GAGxBC,GACHG,GAA2B,GAGzBqB,IACFrC,GAAoB,GACpBc,EAAoB,IAEpBG,EACE1C,EAAoB8B,EAAiBI,EAAkBI,KA4HrD,mBAYF,qBAAKvB,UAAU,UAAf,SAEE,wBACEK,KAAK,QACLL,UAAU,0BACVM,QAxIqB,WAC7BU,EAAmB,IACnBI,EAAoB,IACpBI,EAAoB,IACpBN,GAA0B,GAC1BI,GAA2B,GAC3BI,GAA2B,IA+HrB,4BEtNGsB,EAA+B,SAAC,GAQtC,IAPLC,EAOI,EAPJA,iBACAhE,EAMI,EANJA,mBACAiE,EAKI,EALJA,kBACA/D,EAII,EAJJA,qBACAgE,EAGI,EAHJA,aACA/D,EAEI,EAFJA,gBAGA,EAAwC0B,mBAAyB,IAAjE,mBAAOsC,EAAP,KAAqBC,EAArB,KACA,EAAgDvC,oBAAS,GAAzD,mBAAOH,EAAP,KAAyBD,EAAzB,KACA,EAA0DI,oBAAS,GAAnE,mBAAOwC,EAAP,KAA8BzC,EAA9B,KAEMD,EAA6BjB,sBAAW,sBAC5C,4BAAAC,EAAA,sEAEIiB,GAAyB,GACzBH,GAAoB,GAHxB,SD3BKhC,EAAA,2BC+B4CO,IAJjD,OAIUsE,EAJV,OAMIF,EAAgBE,GANpB,gDAQI1C,GAAyB,GAR7B,yBAUI1B,GAAqB,GAVzB,4EAYG,CAACF,IAGNa,qBAAU,WACRc,MACC,CAAC3B,IAEJ,IAAMuE,EAAwB7D,sBAAW,uCACvC,WAAO8D,GAAP,SAAA7D,EAAA,sEAEIiB,GAAyB,GAF7B,SDhCKnC,EAAA,oBCmCmB+E,IAHxB,sDAKI5C,GAAyB,GAL7B,uBAOID,IAPJ,0EADuC,sDAUpC,IAOL,OACE,qBAAKZ,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,oBACOiD,EAAiB9C,GADxB,aAC+B8C,EAAiB7C,SAGhD,mBAAG,UAAQ,WAAX,SACG6C,EAAiB/E,UAItB,sBAAK8B,UAAU,QAAf,UACGkD,EACG,cAAC,EAAD,IAEA,qCACGI,GACC,qBACEtD,UAAU,yBACV,UAAQ,gBAFV,kCAOuB,IAAxBoD,EAAarD,SACRuD,GAEF,mBAAGtD,UAAU,aAAa,UAAQ,oBAAlC,6BAKHoD,EAAarD,OAAS,IAAMuD,GAC3B,qCACE,mBAAGtD,UAAU,aAAb,uBAECoD,EAAanD,KAAI,SAAAyD,GAAO,OACvB,0BACE1D,UAAU,mBACV,UAAQ,UAFV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBAAG2D,KAAI,iBAAYD,EAAQxB,OAAS,UAAQ,gBAA5C,SACGwB,EAAQzB,OAEX,wBACE,UAAQ,gBACR5B,KAAK,SACLL,UAAU,kBACV,aAAW,SACXM,QAAS,kBAzDPmD,EAyDgCC,EAAQvD,QAxDlEqD,EAAsBC,GADG,IAACA,GAoDJ,8BAWF,qBAAKzD,UAAU,eAAe,UAAQ,cAAtC,SACG0D,EAAQxF,SAlBNwF,EAAQvD,cA2BzBgD,IAAiBD,IAAsBI,GACvC,wBACE,UAAQ,qBACRjD,KAAK,SACLL,UAAU,iBACVM,QAAS,kBAAMlB,GAAgB,IAJjC,gCAWH+D,IAAiBG,GAChB,cAAC,EAAD,CACErE,mBAAoBA,EACpByB,oBAAqBA,EACrBC,iBAAkBA,EAClBC,2BAA4BA,EAC5BC,yBAA0BA,UC3IzB+C,EAAgC,SAAC,GAOvC,IAAD,EANJC,EAMI,EANJA,WACAjF,EAKI,EALJA,eACAkF,EAII,EAJJA,gBACAvE,EAGI,EAHJA,sBACAT,EAEI,EAFJA,gBACAM,EACI,EADJA,gBAEA,EAAgC0B,oBAAS,GAAzC,mBAAOiD,EAAP,KAAiBC,EAAjB,KAEMC,EAAmBrF,EAAc,UACnCiF,EAAWK,MAAK,SAAAC,GAAI,OAAKvF,IAAmBuF,EAAKhE,aADd,aACnC,EAAsD8B,KACtD,gBAYJ,OACE,sBACE,UAAQ,eACRjC,UAAWyC,IAAW,WAAY,CAChC,YAAasB,IAHjB,UAME,qBAAK/D,UAAU,mBAAf,SACE,yBACEK,KAAK,SACLL,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdM,QAAS,kBAAM0D,GAAaD,IAC5BK,OAAQ,SAAChC,GACFA,EAAMiC,YAAYC,eACrBN,GAAY,IARlB,UAYE,+BAAOC,IAEP,sBAAMjE,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKnD,qBAAKA,UAAU,gBAAgBG,GAAG,gBAAgBoE,KAAK,OAAvD,SACE,qBAAKvE,UAAU,mBAAf,SACG6D,EAAW5D,KAAI,SAAAkE,GAAI,OAClB,mBAEER,KAAI,gBAAWQ,EAAKhE,IACpBH,UAAWyC,IAAW,gBAAiB,CACrC,aAAc7D,IAAmBuF,EAAKhE,KAExCG,QAAS,WA/CM,IAACkE,IAgDKL,EAAKhE,IA/C/BvB,IAAmB4F,IACtBjF,GAAsB,GACtBuE,EAAgB,GAAD,OAAIU,IACnB1F,GAAgB,IAGlBkF,GAAY,GA0CA5E,GAAgB,IARpB,SAWG+E,EAAKlC,MAVDkC,EAAKhE,eCtDXsE,EAAgB,WAC3B,MAAoC3D,mBAAsB,IAA1D,mBAAO+C,EAAP,KAAmBa,EAAnB,KACA,EAA0C5D,mBAAS,IAAnD,mBAAOlC,EAAP,KAAuBkF,EAAvB,KACA,EAAoDhD,oBAAS,GAA7D,mBAAOxB,EAAP,KAA2BC,EAA3B,KACA,EAAwCuB,oBAAS,GAAjD,mBAAOjC,EAAP,KAAqBC,EAArB,KACA,EAAgDgC,qBAAhD,mBAAOmC,EAAP,KAAyBjE,EAAzB,KACA,EAAoD8B,mBAAS,GAA7D,mBAAO7B,EAAP,KAA2BC,EAA3B,KACA,EAAkD4B,oBAAS,GAA3D,mBAAOoC,EAAP,KAA0B/D,EAA1B,KACA,EAAkD2B,mBAAsB,IAAxE,mBAAO/B,EAAP,KAA0BM,EAA1B,KACA,EAA0CyB,oBAAS,GAAnD,mBAAOtB,EAAP,KAAsBC,EAAtB,KACA,EAAwCqB,oBAAS,GAAjD,mBAAOqC,EAAP,KAAqB/D,EAArB,KAEMuF,EAAsBhF,sBAAW,sBACrC,4BAAAC,EAAA,sEAEIH,GAAiB,GAFrB,SC1BKf,EAAmB,UD0BxB,OAGUkG,EAHV,OAKIF,EAAcE,GALlB,gDAOInF,GAAiB,GAPrB,yDASG,IAOL,OAJAK,qBAAU,WACR6E,MACC,IAGD,sBAAM3E,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACE6D,WAAYA,EACZjF,eAAgBA,EAChBW,sBAAuBA,EACvBuE,gBAAiBA,EACjBhF,gBAAiBA,EACjBM,gBAAiBA,MAIrB,sBAAKY,UAAU,QAAQ,UAAQ,cAA/B,WACIpB,IAAmBY,GACnB,mBAAG,UAAQ,iBAAX,8BAKDF,GAAsB,cAAC,EAAD,IAEtBE,GACC,qBACEQ,UAAU,yBACV,UAAQ,oBAFV,mCAQDpB,IAAmBU,GACc,IAA7BP,EAAkBgB,SAAiBP,GACtC,qBACEQ,UAAU,0BACV,UAAQ,aAFV,0BAQDpB,GACC,cAAC,EAAD,CACEA,eAAgBA,EAChBC,aAAcA,EACdC,gBAAiBA,EACjBE,oBAAqBA,EACrBC,mBAAoBA,EACpBC,sBAAuBA,EACvBC,qBAAsBA,EACtBC,gBAAiBA,EACjBL,kBAAmBA,EACnBM,qBAAsBA,EACtBC,mBAAoBA,EACpBC,sBAAuBA,EACvBE,iBAAkBA,EAClBD,cAAeA,YAOzB,qBACE,UAAQ,UACRQ,UAAWyC,IACT,OACA,YACA,eACA,UACA,CAAE,gBAAiB5D,IAPvB,SAUGD,GAAkBC,GAAgBoE,GACjC,qBAAKjD,UAAU,gCAAf,SAEE,cAAC,EAAD,CACEiD,iBAAkBA,EAClBhE,mBAAoBA,EACpBiE,kBAAmBA,EACnB/D,qBAAsBA,EACtBgE,aAAcA,EACd/D,gBAAiBA,gBEhInCyF,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e067de4a.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useCallback, useEffect } from 'react';\nimport { getPosts } from '../api/posts';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  selectedUserId: string,\n  selectedUserPostId: number,\n  setSelectedUserPostId: (postId: number) => void,\n  openUserPost: boolean,\n  setOpenUserPost: (\n    isOpen: boolean) => void,\n  selectedUserPosts: Post[],\n  setSelectedUserPosts: (userPosts: Post[]) => void,\n  setSelectedUserPost: (userPost: Post) => void,\n  setIsLoadingComments: (load: boolean) => void,\n  setWriteComment: (load: boolean) => void,\n  isLoadingUserPosts: boolean,\n  setIsLoadingUserPosts: (load: boolean) => void,\n  failedToFetch: boolean,\n  setFailedToFetch: (loadData: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId,\n  openUserPost,\n  setOpenUserPost,\n  selectedUserPosts,\n  setSelectedUserPost,\n  selectedUserPostId,\n  setSelectedUserPostId,\n  setIsLoadingComments,\n  setWriteComment,\n  setSelectedUserPosts,\n  isLoadingUserPosts,\n  setIsLoadingUserPosts,\n  failedToFetch,\n  setFailedToFetch,\n}) => {\n  const loadUserPostsFromServer = useCallback(\n    async () => {\n      try {\n        setFailedToFetch(false);\n        const postsFromServer = await getPosts(selectedUserId);\n\n        setSelectedUserPosts(postsFromServer);\n      } catch (error) {\n        setFailedToFetch(true);\n      } finally {\n        setIsLoadingUserPosts(false);\n      }\n    }, [selectedUserId],\n  );\n\n  useEffect(() => {\n    loadUserPostsFromServer();\n  }, [selectedUserId]);\n\n  const handleLoaderComments = (post: Post) => {\n    if (openUserPost && selectedUserPostId !== post.id) {\n      setOpenUserPost(true);\n    } else {\n      setOpenUserPost(!openUserPost);\n    }\n\n    setWriteComment(false);\n    setSelectedUserPostId(post.id);\n    setSelectedUserPost(post);\n    setIsLoadingComments(true);\n  };\n\n  return (\n    <>\n      {\n        selectedUserPosts.length > 0\n        && !isLoadingUserPosts && !failedToFetch && (\n          <div data-cy=\"PostsList\">\n            <p className=\"title\">Posts:</p>\n            <table\n              className=\"table is-fullwidth is-striped is-hoverable is-narrow\"\n            >\n              <thead>\n                <tr className=\"has-background-link-light\">\n                  <th>#</th>\n                  <th>Title</th>\n                  <th> </th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {selectedUserPosts.map(post => (\n                  <tr\n                    data-cy=\"Post\"\n                    key={post.id}\n                  >\n                    <td data-cy=\"PostId\">{post.id}</td>\n\n                    <td data-cy=\"PostTitle\">\n                      {post.title}\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className={`button is-link ${openUserPost && selectedUserPostId === post.id ? '' : 'is-light'} `}\n                        onClick={() => handleLoaderComments(post)}\n                      >\n                        {(openUserPost && selectedUserPostId === post.id)\n                          ? 'Close'\n                          : 'Open'}\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n\n              </tbody>\n            </table>\n          </div>\n        )\n      }\n    </>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: string) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState, useCallback } from 'react';\nimport { createComment } from '../api/comments';\n\ntype Props = {\n  selectedUserPostId: number,\n  // setAddComment: (load: boolean) => void,\n  setIsLoadingComment: (load: boolean) => void,\n  isLoadingComment: boolean,\n  loadUserCommentsFromServer: () => void,\n  setFailedToFetchComments: (loadData: boolean) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedUserPostId,\n  setIsLoadingComment,\n  isLoadingComment,\n  loadUserCommentsFromServer,\n  setFailedToFetchComments,\n}) => {\n  const [inputAuthorName, setInputAuthorName] = useState('');\n  const [isEmptyInputAuthorName, setIsEmptyInputAuthorName] = useState(false);\n  const [inputAuthorEmail, setInputAuthorEmail] = useState('');\n  const [isEmptyInputAuthorEmail, setIsEmptyInputAuthorEmail] = useState(false);\n  const [inputCommentText, setInputCommentText] = useState('');\n  const [isEmptyInputCommentText, setIsEmptyInputCommentText] = useState(false);\n\n  const loadCommentOnServer = useCallback(\n    async (userPostId, authorName, authorEmail, commentText) => {\n      try {\n        setFailedToFetchComments(false);\n        await createComment(\n          userPostId,\n          authorName,\n          authorEmail,\n          commentText,\n        );\n      } catch (error) {\n        setFailedToFetchComments(true);\n      } finally {\n        loadUserCommentsFromServer();\n      }\n    }, [],\n  );\n\n  const handleChangeAutorName = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setInputAuthorName(event.target.value);\n    if (event.target.value) {\n      setIsEmptyInputAuthorName(false);\n    }\n  };\n\n  const handleChangeAutorEmail = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setInputAuthorEmail(event.target.value);\n    if (event.target.value) {\n      setIsEmptyInputAuthorEmail(false);\n    }\n  };\n\n  const handleChangeCommentText = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setInputCommentText(event.target.value);\n    if (event.target.value) {\n      setIsEmptyInputCommentText(false);\n    }\n  };\n\n  const handleAddComment = () => {\n    const isAllDataFilled = selectedUserPostId && inputAuthorName\n      && inputAuthorEmail && inputCommentText;\n\n    if (!inputAuthorName) {\n      setIsEmptyInputAuthorName(true);\n    }\n\n    if (!inputAuthorEmail) {\n      setIsEmptyInputAuthorEmail(true);\n    }\n\n    if (!inputCommentText) {\n      setIsEmptyInputCommentText(true);\n    }\n\n    if (isAllDataFilled) {\n      setIsLoadingComment(true);\n      setInputCommentText('');\n      // setAddComment(true);\n      loadCommentOnServer(\n        selectedUserPostId, inputAuthorName, inputAuthorEmail, inputCommentText,\n      );\n    }\n  };\n\n  const handleClearCommentData = () => {\n    setInputAuthorName('');\n    setInputAuthorEmail('');\n    setInputCommentText('');\n    setIsEmptyInputAuthorName(false);\n    setIsEmptyInputAuthorEmail(false);\n    setIsEmptyInputCommentText(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            value={inputAuthorName}\n            className={classNames('input', {\n              'is-danger': isEmptyInputAuthorName,\n            })}\n            onChange={(event) => handleChangeAutorName(event)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isEmptyInputAuthorName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmptyInputAuthorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={inputAuthorEmail}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isEmptyInputAuthorEmail,\n            })}\n            onChange={(event) => handleChangeAutorEmail(event)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmptyInputAuthorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmptyInputAuthorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={inputCommentText}\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isEmptyInputCommentText,\n            })}\n            onChange={(event) => handleChangeCommentText(event)}\n          />\n        </div>\n\n        {isEmptyInputCommentText && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoadingComment },\n            )}\n            onClick={handleAddComment}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearCommentData}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (\n  postId: number, name: string, email: string, body: string,\n) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n\nexport const deleteComment = (idComment: number) => {\n  return client.delete(`/comments/${idComment}`);\n};\n","import React, { useState, useCallback, useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\n\nimport { getComments, deleteComment } from '../api/comments';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  selectedUserPost: Post,\n  selectedUserPostId: number,\n  isLoadingComments: boolean,\n  setIsLoadingComments: (load: boolean) => void,\n  writeComment: boolean,\n  setWriteComment: (load: boolean) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedUserPost,\n  selectedUserPostId,\n  isLoadingComments,\n  setIsLoadingComments,\n  writeComment,\n  setWriteComment,\n\n}) => {\n  const [userComments, setUserComments] = useState<Comment[] | []>([]);\n  const [isLoadingComment, setIsLoadingComment] = useState(false);\n  const [failedToFetchComments, setFailedToFetchComments] = useState(false);\n\n  const loadUserCommentsFromServer = useCallback(\n    async () => {\n      try {\n        setFailedToFetchComments(false);\n        setIsLoadingComment(false);\n        const commentsFromServer = await getComments(selectedUserPostId);\n\n        setUserComments(commentsFromServer);\n      } catch (error) {\n        setFailedToFetchComments(true);\n      } finally {\n        setIsLoadingComments(false);\n      }\n    }, [selectedUserPostId],\n  );\n\n  useEffect(() => {\n    loadUserCommentsFromServer();\n  }, [selectedUserPostId]);\n\n  const deleteCommentOnServer = useCallback(\n    async (commentId) => {\n      try {\n        setFailedToFetchComments(false);\n        await deleteComment(commentId);\n      } catch (error) {\n        setFailedToFetchComments(true);\n      } finally {\n        loadUserCommentsFromServer();\n      }\n    }, [],\n  );\n\n  const handleDeleteComent = (commentId: number) => {\n    deleteCommentOnServer(commentId);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedUserPost.id}: ${selectedUserPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedUserPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments\n            ? <Loader />\n            : (\n              <>\n                {failedToFetchComments && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"CommentsError\"\n                  >\n                    Something went wrong\n                  </div>\n                )}\n                {userComments.length === 0\n                  && !failedToFetchComments\n                  && (\n                    <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                      No comments yet\n                    </p>\n                  )}\n\n                {userComments.length > 0 && !failedToFetchComments && (\n                  <>\n                    <p className=\"title is-4\">Comments:</p>\n\n                    {userComments.map(comment => (\n                      <article\n                        className=\"message is-small\"\n                        data-cy=\"Comment\"\n                        key={comment.id}\n                      >\n                        <div className=\"message-header\">\n                          <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                            {comment.name}\n                          </a>\n                          <button\n                            data-cy=\"CommentDelete\"\n                            type=\"button\"\n                            className=\"delete is-small\"\n                            aria-label=\"delete\"\n                            onClick={() => handleDeleteComent(comment.id)}\n                          >\n                            delete button\n                          </button>\n                        </div>\n\n                        <div className=\"message-body\" data-cy=\"CommentBody\">\n                          {comment.body}\n                        </div>\n                      </article>\n                    ))}\n                  </>\n                )}\n              </>\n            )}\n\n          {!writeComment && !isLoadingComments && !failedToFetchComments && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setWriteComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {writeComment && !failedToFetchComments && (\n          <NewCommentForm\n            selectedUserPostId={selectedUserPostId}\n            setIsLoadingComment={setIsLoadingComment}\n            isLoadingComment={isLoadingComment}\n            loadUserCommentsFromServer={loadUserCommentsFromServer}\n            setFailedToFetchComments={setFailedToFetchComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { User } from '../types/User';\n\ntype Props = {\n  usersArray: User[] | [],\n  selectedUserId: string,\n  setSelectedUser: (userId: string) => void,\n  setIsLoadingUserPosts: (load: boolean) => void,\n  setOpenUserPost: (\n    isOpen: boolean) => void,\n  setWriteComment: (load: boolean) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  usersArray,\n  selectedUserId,\n  setSelectedUser,\n  setIsLoadingUserPosts,\n  setOpenUserPost,\n  setWriteComment,\n}) => {\n  const [dropDown, setDropDown] = useState(false);\n\n  const selectedUserName = selectedUserId\n    ? usersArray.find(user => +selectedUserId === user.id)?.name\n    : 'Choose a user';\n\n  const handleUserSelected = (userId: number) => {\n    if (+selectedUserId !== userId) {\n      setIsLoadingUserPosts(true);\n      setSelectedUser(`${userId}`);\n      setOpenUserPost(false);\n    }\n\n    setDropDown(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': dropDown,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropDown(!dropDown)}\n          onBlur={(event) => {\n            if (!event.nativeEvent.relatedTarget) {\n              setDropDown(false);\n            }\n          }}\n        >\n          <span>{selectedUserName}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {usersArray.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': +selectedUserId === user.id,\n              })}\n              onClick={() => {\n                handleUserSelected(user.id);\n                setWriteComment(false);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useEffect, useCallback, useState,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nimport { getUsers } from './api/users';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [usersArray, setUsersArray] = useState<User[] | []>([]);\n  const [selectedUserId, setSelectedUser] = useState('');\n  const [isLoadingUserPosts, setIsLoadingUserPosts] = useState(false);\n  const [openUserPost, setOpenUserPost] = useState(false);\n  const [selectedUserPost, setSelectedUserPost] = useState<Post>();\n  const [selectedUserPostId, setSelectedUserPostId] = useState(0);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [selectedUserPosts, setSelectedUserPosts] = useState<Post[] | []>([]);\n  const [failedToFetch, setFailedToFetch] = useState(false);\n  const [writeComment, setWriteComment] = useState(false);\n\n  const loadUsersFromServer = useCallback(\n    async () => {\n      try {\n        setFailedToFetch(false);\n        const todosFromServer = await getUsers();\n\n        setUsersArray(todosFromServer);\n      } catch (error) {\n        setFailedToFetch(true);\n      }\n    }, [],\n  );\n\n  useEffect(() => {\n    loadUsersFromServer();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  usersArray={usersArray}\n                  selectedUserId={selectedUserId}\n                  setIsLoadingUserPosts={setIsLoadingUserPosts}\n                  setSelectedUser={setSelectedUser}\n                  setOpenUserPost={setOpenUserPost}\n                  setWriteComment={setWriteComment}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && !failedToFetch && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingUserPosts && <Loader />}\n\n                {failedToFetch && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {selectedUserId && !isLoadingUserPosts\n                  && selectedUserPosts.length === 0 && !failedToFetch && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {selectedUserId && (\n                  <PostsList\n                    selectedUserId={selectedUserId}\n                    openUserPost={openUserPost}\n                    setOpenUserPost={setOpenUserPost}\n                    setSelectedUserPost={setSelectedUserPost}\n                    selectedUserPostId={selectedUserPostId}\n                    setSelectedUserPostId={setSelectedUserPostId}\n                    setIsLoadingComments={setIsLoadingComments}\n                    setWriteComment={setWriteComment}\n                    selectedUserPosts={selectedUserPosts}\n                    setSelectedUserPosts={setSelectedUserPosts}\n                    isLoadingUserPosts={isLoadingUserPosts}\n                    setIsLoadingUserPosts={setIsLoadingUserPosts}\n                    setFailedToFetch={setFailedToFetch}\n                    failedToFetch={failedToFetch}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': openUserPost },\n            )}\n          >\n            {selectedUserId && openUserPost && selectedUserPost && (\n              <div className=\"tile is-child box is-success \">\n\n                <PostDetails\n                  selectedUserPost={selectedUserPost}\n                  selectedUserPostId={selectedUserPostId}\n                  isLoadingComments={isLoadingComments}\n                  setIsLoadingComments={setIsLoadingComments}\n                  writeComment={writeComment}\n                  setWriteComment={setWriteComment}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}