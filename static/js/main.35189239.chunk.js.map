{"version":3,"sources":["utils/fetchClient.ts","types/ErrorType.ts","components/PostsList.tsx","api/posts.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","ErrorType","client","PostsList","selectedUserId","openUserPost","setOpenUserPost","selectedUserPosts","setSelectedUserPost","selectedUserPostId","setSelectedUserPostId","setIsLoadingComments","setWriteComment","setSelectedUserPosts","isLoadingUserPosts","setIsLoadingUserPosts","failedToFetch","setFailedToFetch","loadUserPostsFromServer","useCallback","a","postsFromServer","userPosts","useEffect","isPostsLoad","length","className","map","post","id","title","type","onClick","handleLoaderComments","Loader","NewCommentForm","isLoadingComment","loadCommentOnServer","useState","inputAuthorName","setInputAuthorName","isEmptyInputAuthorName","setIsEmptyInputAuthorName","inputAuthorEmail","setInputAuthorEmail","isEmptyInputAuthorEmail","setIsEmptyInputAuthorEmail","inputCommentText","setInputCommentText","isEmptyInputCommentText","setIsEmptyInputCommentText","onSubmit","event","preventDefault","isAllDataFilled","postId","name","email","handleAddComment","htmlFor","placeholder","value","classNames","onChange","target","handleChangeAutorName","handleChangeAutorEmail","handleChangeCommentText","createComment","comment","PostDetails","selectedUserPost","isLoadingComments","writeComment","userComments","setUserComments","setIsLoadingComment","loadUserCommentsFromServer","commentsFromServer","postComments","deleteCommentOnServer","commentId","commentDelete","commentAdd","errorMessage","isLoadComments","href","filter","UserSelector","usersArray","setSelectedUser","dropDown","setDropDown","selectedUserName","find","user","onBlur","nativeEvent","relatedTarget","role","userId","App","setUsersArray","loadUsersFromServer","todosFromServer","usersLoad","isLoadUserPosts","isOpenUserPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.35189239.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorType {\n  usersLoad = 'Something went wrong with loading users',\n  userPosts = 'Something went wrong with loading user posts',\n  postComments = 'Something went wrong with loading post comments',\n  commentDelete = 'Something went wrong with deleting comment',\n  commentAdd = 'Something went wrong with adding comment',\n}\n","import React, { useCallback, useEffect } from 'react';\nimport { getPosts } from '../api/posts';\nimport { Post } from '../types/Post';\nimport { ErrorType } from '../types/ErrorType';\n\ntype Props = {\n  selectedUserId: string,\n  selectedUserPostId: number,\n  setSelectedUserPostId: (postId: number) => void,\n  openUserPost: boolean,\n  setOpenUserPost: (\n    isOpen: boolean) => void,\n  selectedUserPosts: Post[],\n  setSelectedUserPosts: (userPosts: Post[]) => void,\n  setSelectedUserPost: (userPost: Post) => void,\n  setIsLoadingComments: (load: boolean) => void,\n  setWriteComment: (load: boolean) => void,\n  isLoadingUserPosts: boolean,\n  setIsLoadingUserPosts: (load: boolean) => void,\n  failedToFetch: ErrorType | null,\n  setFailedToFetch: (loadData: ErrorType | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId,\n  openUserPost,\n  setOpenUserPost,\n  selectedUserPosts,\n  setSelectedUserPost,\n  selectedUserPostId,\n  setSelectedUserPostId,\n  setIsLoadingComments,\n  setWriteComment,\n  setSelectedUserPosts,\n  isLoadingUserPosts,\n  setIsLoadingUserPosts,\n  failedToFetch,\n  setFailedToFetch,\n}) => {\n  const loadUserPostsFromServer = useCallback(\n    async () => {\n      try {\n        const postsFromServer = await getPosts(selectedUserId);\n\n        setSelectedUserPosts(postsFromServer);\n      } catch (error) {\n        setFailedToFetch(ErrorType.userPosts);\n      } finally {\n        setIsLoadingUserPosts(false);\n      }\n    }, [selectedUserId],\n  );\n\n  useEffect(() => {\n    loadUserPostsFromServer();\n  }, [selectedUserId]);\n\n  const handleLoaderComments = (post: Post) => {\n    if (openUserPost && selectedUserPostId !== post.id) {\n      setOpenUserPost(true);\n    } else {\n      setOpenUserPost(!openUserPost);\n    }\n\n    setWriteComment(false);\n    setSelectedUserPostId(post.id);\n    setSelectedUserPost(post);\n    setIsLoadingComments(true);\n  };\n\n  const isPostsLoad = selectedUserPosts.length > 0\n  && !isLoadingUserPosts\n  && failedToFetch !== ErrorType.userPosts;\n\n  return (\n    <>\n      {\n        isPostsLoad && (\n          <div data-cy=\"PostsList\">\n            <p className=\"title\">Posts:</p>\n            <table\n              className=\"table is-fullwidth is-striped is-hoverable is-narrow\"\n            >\n              <thead>\n                <tr className=\"has-background-link-light\">\n                  <th>#</th>\n                  <th>Title</th>\n                  <th> </th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {selectedUserPosts.map(post => (\n                  <tr\n                    data-cy=\"Post\"\n                    key={post.id}\n                  >\n                    <td data-cy=\"PostId\">{post.id}</td>\n\n                    <td data-cy=\"PostTitle\">\n                      {post.title}\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        type=\"button\"\n                        data-cy=\"PostButton\"\n                        className={`button is-link ${openUserPost && selectedUserPostId === post.id ? '' : 'is-light'} `}\n                        onClick={() => handleLoaderComments(post)}\n                      >\n                        {(openUserPost && selectedUserPostId === post.id)\n                          ? 'Close'\n                          : 'Open'}\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n\n              </tbody>\n            </table>\n          </div>\n        )\n      }\n    </>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: string) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  selectedUserPostId: number,\n  isLoadingComment: boolean,\n  loadCommentOnServer: (comment: CommentData) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedUserPostId,\n  isLoadingComment,\n  loadCommentOnServer,\n}) => {\n  const [inputAuthorName, setInputAuthorName] = useState('');\n  const [isEmptyInputAuthorName, setIsEmptyInputAuthorName] = useState(false);\n  const [inputAuthorEmail, setInputAuthorEmail] = useState('');\n  const [isEmptyInputAuthorEmail, setIsEmptyInputAuthorEmail] = useState(false);\n  const [inputCommentText, setInputCommentText] = useState('');\n  const [isEmptyInputCommentText, setIsEmptyInputCommentText] = useState(false);\n\n  const handleChangeAutorName = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setInputAuthorName(event.target.value);\n    if (event.target.value) {\n      setIsEmptyInputAuthorName(false);\n    }\n  };\n\n  const handleChangeAutorEmail = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setInputAuthorEmail(event.target.value);\n    if (event.target.value) {\n      setIsEmptyInputAuthorEmail(false);\n    }\n  };\n\n  const handleChangeCommentText = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setInputCommentText(event.target.value);\n    if (event.target.value) {\n      setIsEmptyInputCommentText(false);\n    }\n  };\n\n  const handleAddComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const isAllDataFilled = selectedUserPostId && inputAuthorName\n      && inputAuthorEmail && inputCommentText;\n\n    if (!inputAuthorName) {\n      setIsEmptyInputAuthorName(true);\n    }\n\n    if (!inputAuthorEmail) {\n      setIsEmptyInputAuthorEmail(true);\n    }\n\n    if (!inputCommentText) {\n      setIsEmptyInputCommentText(true);\n    }\n\n    if (isAllDataFilled) {\n      loadCommentOnServer({\n        postId: selectedUserPostId,\n        name: inputAuthorName,\n        email: inputAuthorEmail,\n        body: inputCommentText,\n      });\n      setInputCommentText('');\n    }\n  };\n\n  const handleClearCommentData = () => {\n    setInputAuthorName('');\n    setInputAuthorEmail('');\n    setInputCommentText('');\n    setIsEmptyInputAuthorName(false);\n    setIsEmptyInputAuthorEmail(false);\n    setIsEmptyInputCommentText(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => handleAddComment(event)}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            value={inputAuthorName}\n            className={classNames('input', {\n              'is-danger': isEmptyInputAuthorName,\n            })}\n            onChange={(event) => handleChangeAutorName(event)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isEmptyInputAuthorName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmptyInputAuthorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={inputAuthorEmail}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isEmptyInputAuthorEmail,\n            })}\n            onChange={(event) => handleChangeAutorEmail(event)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmptyInputAuthorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmptyInputAuthorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={inputCommentText}\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isEmptyInputCommentText,\n            })}\n            onChange={(event) => handleChangeCommentText(event)}\n          />\n        </div>\n\n        {isEmptyInputCommentText && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoadingComment },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearCommentData}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (comment: Comment) => {\n  return client.post<Comment>('/comments', comment);\n};\n\nexport const postComment = (comment: Comment) => {\n  return client.post<Comment>('/comments', comment);\n};\n\nexport const deleteComment = (idComment: number) => {\n  return client.delete(`/comments/${idComment}`);\n};\n","import React, { useState, useCallback, useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment, CommentData } from '../types/Comment';\n\nimport { getComments, deleteComment, createComment } from '../api/comments';\nimport { Post } from '../types/Post';\nimport { ErrorType } from '../types/ErrorType';\n\ntype Props = {\n  selectedUserPost: Post,\n  selectedUserPostId: number,\n  isLoadingComments: boolean,\n  setIsLoadingComments: (load: boolean) => void,\n  writeComment: boolean,\n  setWriteComment: (load: boolean) => void,\n  failedToFetch: ErrorType | null,\n  setFailedToFetch: (loadData: ErrorType | null) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedUserPost,\n  selectedUserPostId,\n  isLoadingComments,\n  setIsLoadingComments,\n  writeComment,\n  setWriteComment,\n  failedToFetch,\n  setFailedToFetch,\n}) => {\n  const [userComments, setUserComments] = useState<Comment[] | []>([]);\n  const [isLoadingComment, setIsLoadingComment] = useState(false);\n\n  const loadUserCommentsFromServer = useCallback(\n    async () => {\n      try {\n        const commentsFromServer = await getComments(selectedUserPostId);\n\n        setUserComments(commentsFromServer);\n        setIsLoadingComments(false);\n        setIsLoadingComment(false);\n      } catch (error) {\n        setFailedToFetch(ErrorType.postComments);\n      }\n    }, [selectedUserPostId, userComments],\n  );\n\n  useEffect(() => {\n    loadUserCommentsFromServer();\n  }, [selectedUserPostId]);\n\n  const deleteCommentOnServer = useCallback(\n    async (commentId) => {\n      try {\n        await deleteComment(commentId);\n      } catch (error) {\n        setFailedToFetch(ErrorType.commentDelete);\n      } finally {\n        setIsLoadingComment(false);\n      }\n    }, [userComments],\n  );\n\n  const loadCommentOnServer = async (comment: CommentData) => {\n    setIsLoadingComment(true);\n    try {\n      await createComment({ ...comment });\n    } catch (error) {\n      setFailedToFetch(ErrorType.commentAdd);\n    } finally {\n      loadUserCommentsFromServer();\n    }\n  };\n\n  const handleDeleteComent = (commentId: number) => {\n    setUserComments(userComments.filter((comment) => comment.id !== commentId));\n    deleteCommentOnServer(commentId);\n  };\n\n  const errorMessage = failedToFetch === ErrorType.postComments\n   || failedToFetch === ErrorType.commentDelete\n   || failedToFetch === ErrorType.commentAdd;\n\n  const isLoadComments = !failedToFetch && !isLoadingComments;\n\n  return (\n    <>\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"content\" data-cy=\"PostDetails\">\n          <div className=\"block\">\n            <h2 data-cy=\"PostTitle\">\n              {`#${selectedUserPost.id}: ${selectedUserPost.title}`}\n            </h2>\n\n            <p data-cy=\"PostBody\">\n              {selectedUserPost.body}\n            </p>\n          </div>\n\n          <div className=\"block\">\n            {isLoadingComments && !failedToFetch && <Loader />}\n            <>\n              {errorMessage && (\n                <div\n                  className=\"notification is-danger\"\n                  data-cy=\"CommentsError\"\n                >\n                  {failedToFetch}\n                </div>\n              )}\n\n              {isLoadComments && userComments.length === 0 && (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )}\n\n              {isLoadComments && userComments.length > 0 && (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n                  {userComments.map(comment => (\n                    <article\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                      key={comment.id}\n                    >\n                      <div className=\"message-header\">\n                        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                          {comment.name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => handleDeleteComent(comment.id || 0)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  ))}\n                </>\n              )}\n\n              {isLoadComments && !writeComment && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setWriteComment(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          </div>\n\n          {isLoadComments && writeComment && (\n            <NewCommentForm\n              selectedUserPostId={selectedUserPostId}\n              isLoadingComment={isLoadingComment}\n              loadCommentOnServer={loadCommentOnServer}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  usersArray: User[] | [],\n  selectedUserId: string,\n  setSelectedUser: (userId: string) => void,\n  setIsLoadingUserPosts: (load: boolean) => void,\n  setOpenUserPost: (\n    isOpen: boolean) => void,\n  setWriteComment: (load: boolean) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  usersArray,\n  selectedUserId,\n  setSelectedUser,\n  setIsLoadingUserPosts,\n  setOpenUserPost,\n  setWriteComment,\n}) => {\n  const [dropDown, setDropDown] = useState(false);\n\n  const selectedUserName = selectedUserId\n    ? usersArray.find(user => +selectedUserId === user.id)?.name\n    : 'Choose a user';\n\n  const handleUserSelected = (userId: number) => {\n    if (+selectedUserId !== userId) {\n      setIsLoadingUserPosts(true);\n      setSelectedUser(`${userId}`);\n      setOpenUserPost(false);\n    }\n\n    setDropDown(false);\n    setWriteComment(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': dropDown,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropDown(!dropDown)}\n          onBlur={(event) => {\n            if (!event.nativeEvent.relatedTarget) {\n              setDropDown(false);\n            }\n          }}\n        >\n          <span>{selectedUserName}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {usersArray.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': +selectedUserId === user.id,\n              })}\n              onClick={() => handleUserSelected(user.id)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useEffect, useCallback, useState,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { getUsers } from './api/users';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { ErrorType } from './types/ErrorType';\n\nexport const App: React.FC = () => {\n  const [usersArray, setUsersArray] = useState<User[] | []>([]);\n  const [selectedUserId, setSelectedUser] = useState('');\n  const [isLoadingUserPosts, setIsLoadingUserPosts] = useState(false);\n  const [openUserPost, setOpenUserPost] = useState(false);\n  const [selectedUserPost, setSelectedUserPost] = useState<Post>();\n  const [selectedUserPostId, setSelectedUserPostId] = useState(0);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [selectedUserPosts, setSelectedUserPosts] = useState<Post[] | []>([]);\n  const [failedToFetch, setFailedToFetch]\n    = useState<ErrorType | null>(null);\n  const [writeComment, setWriteComment] = useState(false);\n\n  const loadUsersFromServer = useCallback(\n    async () => {\n      try {\n        const todosFromServer = await getUsers();\n\n        setUsersArray(todosFromServer);\n      } catch (error) {\n        setFailedToFetch(ErrorType.usersLoad);\n      }\n    }, [],\n  );\n\n  useEffect(() => {\n    loadUsersFromServer();\n  }, []);\n\n  const errorMessage = failedToFetch === ErrorType.usersLoad\n    || failedToFetch === ErrorType.userPosts;\n\n  const isLoadUserPosts = !!selectedUserId && !isLoadingUserPosts\n   && !failedToFetch;\n\n  const isOpenUserPost = !!selectedUserId && openUserPost && !!selectedUserPost;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  usersArray={usersArray}\n                  selectedUserId={selectedUserId}\n                  setIsLoadingUserPosts={setIsLoadingUserPosts}\n                  setSelectedUser={setSelectedUser}\n                  setOpenUserPost={setOpenUserPost}\n                  setWriteComment={setWriteComment}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && !failedToFetch && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingUserPosts && <Loader />}\n\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {failedToFetch}\n                  </div>\n                )}\n\n                {isLoadUserPosts && selectedUserPosts.length === 0 && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {selectedUserId && (\n                  <PostsList\n                    selectedUserId={selectedUserId}\n                    openUserPost={openUserPost}\n                    setOpenUserPost={setOpenUserPost}\n                    setSelectedUserPost={setSelectedUserPost}\n                    selectedUserPostId={selectedUserPostId}\n                    setSelectedUserPostId={setSelectedUserPostId}\n                    setIsLoadingComments={setIsLoadingComments}\n                    setWriteComment={setWriteComment}\n                    selectedUserPosts={selectedUserPosts}\n                    setSelectedUserPosts={setSelectedUserPosts}\n                    isLoadingUserPosts={isLoadingUserPosts}\n                    setIsLoadingUserPosts={setIsLoadingUserPosts}\n                    setFailedToFetch={setFailedToFetch}\n                    failedToFetch={failedToFetch}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': openUserPost },\n            )}\n          >\n            {isOpenUserPost && (\n              <div className=\"tile is-child box is-success \">\n\n                <PostDetails\n                  selectedUserPost={selectedUserPost}\n                  selectedUserPostId={selectedUserPostId}\n                  isLoadingComments={isLoadingComments}\n                  setIsLoadingComments={setIsLoadingComments}\n                  writeComment={writeComment}\n                  setWriteComment={setWriteComment}\n                  setFailedToFetch={setFailedToFetch}\n                  failedToFetch={failedToFetch}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}